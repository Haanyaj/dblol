{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Haan\\\\Documents\\\\reactlol\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"autoFocus\", \"children\", \"component\", \"components\", \"componentsProps\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../SelectUnstyled/useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return (\n    /*#__PURE__*/\n    _jsx(React.Fragment, {\n      children: selectedOptions.map(function (o) {\n        return o.label;\n      }).join(', ')\n    })\n  );\n}\n\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n\n  if (selectedOptions.every(function (o) {\n    return typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean';\n  })) {\n    return selectedOptions.map(function (o) {\n      return String(o.value);\n    });\n  }\n\n  return JSON.stringify(selectedOptions.map(function (o) {\n    return o.value;\n  }));\n}\n\nfunction useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n      disabled = ownerState.disabled,\n      open = ownerState.open,\n      focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\n\n\nvar MultiSelectUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _props$renderValue, _ref, _components$Listbox, _components$Popper;\n\n  var autoFocus = props.autoFocus,\n      children = props.children,\n      component = props.component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      _props$defaultListbox = props.defaultListboxOpen,\n      defaultListboxOpen = _props$defaultListbox === void 0 ? false : _props$defaultListbox,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,\n      disabledProp = props.disabled,\n      _props$getSerializedV = props.getSerializedValue,\n      getSerializedValue = _props$getSerializedV === void 0 ? defaultFormValueProvider : _props$getSerializedV,\n      listboxId = props.listboxId,\n      listboxOpenProp = props.listboxOpen,\n      name = props.name,\n      onChange = props.onChange,\n      onListboxOpenChange = props.onListboxOpenChange,\n      _props$optionStringif = props.optionStringifier,\n      optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var renderValue = (_props$renderValue = props.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      groupedOptions = _React$useState2[0],\n      setGroupedOptions = _React$useState2[1];\n\n  var options = React.useMemo(function () {\n    return flattenOptionGroups(groupedOptions);\n  }, [groupedOptions]);\n\n  var _useControlled = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      listboxOpen = _useControlled2[0],\n      setListboxOpen = _useControlled2[1];\n\n  React.useEffect(function () {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonDefined = _React$useState4[0],\n      setButtonDefined = _React$useState4[1];\n\n  var buttonRef = React.useRef(null);\n  var listboxRef = React.useRef(null);\n  var Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n  var ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';\n  var Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled;\n  var handleButtonRefChange = React.useCallback(function (element) {\n    setButtonDefined(element != null);\n  }, []);\n  var handleButtonRef = useForkRef(forwardedRef, useForkRef(buttonRef, handleButtonRefChange));\n  React.useEffect(function () {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  var handleOpenChange = function handleOpenChange(isOpen) {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  var _useSelect = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue: defaultValue,\n    disabled: disabledProp,\n    listboxId: listboxId,\n    multiple: true,\n    onChange: onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options: options,\n    optionStringifier: optionStringifier,\n    value: valueProp\n  }),\n      buttonActive = _useSelect.buttonActive,\n      buttonFocusVisible = _useSelect.buttonFocusVisible,\n      disabled = _useSelect.disabled,\n      getButtonProps = _useSelect.getButtonProps,\n      getListboxProps = _useSelect.getListboxProps,\n      getOptionProps = _useSelect.getOptionProps,\n      getOptionState = _useSelect.getOptionState,\n      value = _useSelect.value;\n\n  var ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen: defaultListboxOpen,\n    disabled: disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue: renderValue,\n    value: value\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var selectedOptions = React.useMemo(function () {\n    if (value == null) {\n      return [];\n    }\n\n    return options.filter(function (o) {\n      return value.includes(o.value);\n    });\n  }, [options, value]);\n  var buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: componentsProps.root,\n    externalForwardedProps: other,\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: componentsProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState: ownerState,\n    className: classes.listbox\n  });\n  var popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: componentsProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState: ownerState,\n    className: classes.popper\n  });\n  var context = {\n    getOptionProps: getOptionProps,\n    getOptionState: getOptionState,\n    listboxRef: listboxRef\n  };\n  return (\n    /*#__PURE__*/\n    _jsxs(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      _jsx(Button, _extends({}, buttonProps, {\n        children: renderValue(selectedOptions)\n      })), buttonDefined &&\n      /*#__PURE__*/\n      _jsx(Popper, _extends({}, popperProps, {\n        children:\n        /*#__PURE__*/\n        _jsx(ListboxRoot, _extends({}, listboxProps, {\n          children:\n          /*#__PURE__*/\n          _jsx(SelectUnstyledContext.Provider, {\n            value: context,\n            children: children\n          })\n        }))\n      })), name &&\n      /*#__PURE__*/\n      _jsx(\"input\", {\n        type: \"hidden\",\n        name: name,\n        value: getSerializedValue(selectedOptions)\n      })]\n    })\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    Listbox: PropTypes.elementType,\n    Popper: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;","map":{"version":3,"sources":["C:/Users/Haan/Documents/reactlol/node_modules/@mui/base/MultiSelectUnstyled/MultiSelectUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_useControlled","useControlled","flattenOptionGroups","getOptionsFromChildren","useSelect","useSlotProps","PopperUnstyled","SelectUnstyledContext","composeClasses","getSelectUnstyledUtilityClass","defaultOptionStringifier","jsx","_jsx","jsxs","_jsxs","defaultRenderMultipleValues","selectedOptions","Fragment","children","map","o","label","join","defaultFormValueProvider","length","every","value","String","JSON","stringify","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popper","MultiSelectUnstyled","forwardRef","props","forwardedRef","_props$renderValue","_ref","_components$Listbox","_components$Popper","autoFocus","component","components","componentsProps","defaultListboxOpen","defaultValue","disabledProp","getSerializedValue","listboxId","listboxOpenProp","listboxOpen","name","onChange","onListboxOpenChange","optionStringifier","valueProp","other","renderValue","useState","groupedOptions","setGroupedOptions","options","useMemo","controlled","default","state","setListboxOpen","useEffect","buttonDefined","setButtonDefined","buttonRef","useRef","listboxRef","Button","Root","ListboxRoot","Listbox","Popper","handleButtonRefChange","useCallback","element","handleButtonRef","current","focus","handleOpenChange","isOpen","multiple","onOpenChange","buttonActive","buttonFocusVisible","getButtonProps","getListboxProps","getOptionProps","getOptionState","classes","filter","includes","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popperProps","anchorEl","disablePortal","placement","role","undefined","context","Provider","type","process","env","NODE_ENV","propTypes","bool","node","shape","oneOfType","func","object","array","string"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"components\", \"componentsProps\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../SelectUnstyled/useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(o => o.label).join(', ')\n  });\n}\n\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n\n  if (selectedOptions.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {\n    return selectedOptions.map(o => String(o.value));\n  }\n\n  return JSON.stringify(selectedOptions.map(o => o.value));\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\n\n\nconst MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _props$renderValue, _ref, _components$Listbox, _components$Popper;\n\n  const {\n    autoFocus,\n    children,\n    component,\n    components = {},\n    componentsProps = {},\n    defaultListboxOpen = false,\n    defaultValue = [],\n    disabled: disabledProp,\n    getSerializedValue = defaultFormValueProvider,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    name,\n    onChange,\n    onListboxOpenChange,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const renderValue = (_props$renderValue = props.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';\n  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, useForkRef(buttonRef, handleButtonRefChange));\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  const handleOpenChange = isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getOptionProps,\n    getOptionState,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple: true,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const selectedOptions = React.useMemo(() => {\n    if (value == null) {\n      return [];\n    }\n\n    return options.filter(o => value.includes(o.value));\n  }, [options, value]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: componentsProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: componentsProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: componentsProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  const context = {\n    getOptionProps,\n    getOptionState,\n    listboxRef\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    Listbox: PropTypes.elementType,\n    Popper: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;"]},"metadata":{},"sourceType":"module"}